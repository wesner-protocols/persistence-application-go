// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: entity.proto

package entity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcRepositoryClient is the client API for GrpcRepository service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcRepositoryClient interface {
	FindById(ctx context.Context, in *ParameterSingleInt64Request, opts ...grpc.CallOption) (*DataSingleEntityResponse, error)
	FindByName(ctx context.Context, in *ParameterSingleInt64Request, opts ...grpc.CallOption) (*DataSingleEntityResponse, error)
	Page(ctx context.Context, in *FilterParameterRequest, opts ...grpc.CallOption) (*DataListEntityResponse, error)
	Count(ctx context.Context, in *FilterParameterRequest, opts ...grpc.CallOption) (*CountResponse, error)
}

type grpcRepositoryClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcRepositoryClient(cc grpc.ClientConnInterface) GrpcRepositoryClient {
	return &grpcRepositoryClient{cc}
}

func (c *grpcRepositoryClient) FindById(ctx context.Context, in *ParameterSingleInt64Request, opts ...grpc.CallOption) (*DataSingleEntityResponse, error) {
	out := new(DataSingleEntityResponse)
	err := c.cc.Invoke(ctx, "/entity.GrpcRepository/FindById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcRepositoryClient) FindByName(ctx context.Context, in *ParameterSingleInt64Request, opts ...grpc.CallOption) (*DataSingleEntityResponse, error) {
	out := new(DataSingleEntityResponse)
	err := c.cc.Invoke(ctx, "/entity.GrpcRepository/FindByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcRepositoryClient) Page(ctx context.Context, in *FilterParameterRequest, opts ...grpc.CallOption) (*DataListEntityResponse, error) {
	out := new(DataListEntityResponse)
	err := c.cc.Invoke(ctx, "/entity.GrpcRepository/Page", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcRepositoryClient) Count(ctx context.Context, in *FilterParameterRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, "/entity.GrpcRepository/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcRepositoryServer is the server API for GrpcRepository service.
// All implementations must embed UnimplementedGrpcRepositoryServer
// for forward compatibility
type GrpcRepositoryServer interface {
	FindById(context.Context, *ParameterSingleInt64Request) (*DataSingleEntityResponse, error)
	FindByName(context.Context, *ParameterSingleInt64Request) (*DataSingleEntityResponse, error)
	Page(context.Context, *FilterParameterRequest) (*DataListEntityResponse, error)
	Count(context.Context, *FilterParameterRequest) (*CountResponse, error)
	mustEmbedUnimplementedGrpcRepositoryServer()
}

// UnimplementedGrpcRepositoryServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcRepositoryServer struct {
}

func (UnimplementedGrpcRepositoryServer) FindById(context.Context, *ParameterSingleInt64Request) (*DataSingleEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedGrpcRepositoryServer) FindByName(context.Context, *ParameterSingleInt64Request) (*DataSingleEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByName not implemented")
}
func (UnimplementedGrpcRepositoryServer) Page(context.Context, *FilterParameterRequest) (*DataListEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Page not implemented")
}
func (UnimplementedGrpcRepositoryServer) Count(context.Context, *FilterParameterRequest) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedGrpcRepositoryServer) mustEmbedUnimplementedGrpcRepositoryServer() {}

// UnsafeGrpcRepositoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcRepositoryServer will
// result in compilation errors.
type UnsafeGrpcRepositoryServer interface {
	mustEmbedUnimplementedGrpcRepositoryServer()
}

func RegisterGrpcRepositoryServer(s grpc.ServiceRegistrar, srv GrpcRepositoryServer) {
	s.RegisterService(&GrpcRepository_ServiceDesc, srv)
}

func _GrpcRepository_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParameterSingleInt64Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcRepositoryServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entity.GrpcRepository/FindById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcRepositoryServer).FindById(ctx, req.(*ParameterSingleInt64Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcRepository_FindByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParameterSingleInt64Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcRepositoryServer).FindByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entity.GrpcRepository/FindByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcRepositoryServer).FindByName(ctx, req.(*ParameterSingleInt64Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcRepository_Page_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterParameterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcRepositoryServer).Page(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entity.GrpcRepository/Page",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcRepositoryServer).Page(ctx, req.(*FilterParameterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcRepository_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterParameterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcRepositoryServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entity.GrpcRepository/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcRepositoryServer).Count(ctx, req.(*FilterParameterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcRepository_ServiceDesc is the grpc.ServiceDesc for GrpcRepository service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcRepository_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entity.GrpcRepository",
	HandlerType: (*GrpcRepositoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindById",
			Handler:    _GrpcRepository_FindById_Handler,
		},
		{
			MethodName: "FindByName",
			Handler:    _GrpcRepository_FindByName_Handler,
		},
		{
			MethodName: "Page",
			Handler:    _GrpcRepository_Page_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _GrpcRepository_Count_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entity.proto",
}

// ServiceTestClient is the client API for ServiceTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceTestClient interface {
	FindTeste(ctx context.Context, in *Teste, opts ...grpc.CallOption) (*Teste, error)
}

type serviceTestClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceTestClient(cc grpc.ClientConnInterface) ServiceTestClient {
	return &serviceTestClient{cc}
}

func (c *serviceTestClient) FindTeste(ctx context.Context, in *Teste, opts ...grpc.CallOption) (*Teste, error) {
	out := new(Teste)
	err := c.cc.Invoke(ctx, "/entity.ServiceTest/FindTeste", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceTestServer is the server API for ServiceTest service.
// All implementations must embed UnimplementedServiceTestServer
// for forward compatibility
type ServiceTestServer interface {
	FindTeste(context.Context, *Teste) (*Teste, error)
	mustEmbedUnimplementedServiceTestServer()
}

// UnimplementedServiceTestServer must be embedded to have forward compatible implementations.
type UnimplementedServiceTestServer struct {
}

func (UnimplementedServiceTestServer) FindTeste(context.Context, *Teste) (*Teste, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTeste not implemented")
}
func (UnimplementedServiceTestServer) mustEmbedUnimplementedServiceTestServer() {}

// UnsafeServiceTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceTestServer will
// result in compilation errors.
type UnsafeServiceTestServer interface {
	mustEmbedUnimplementedServiceTestServer()
}

func RegisterServiceTestServer(s grpc.ServiceRegistrar, srv ServiceTestServer) {
	s.RegisterService(&ServiceTest_ServiceDesc, srv)
}

func _ServiceTest_FindTeste_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Teste)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTestServer).FindTeste(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entity.ServiceTest/FindTeste",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTestServer).FindTeste(ctx, req.(*Teste))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceTest_ServiceDesc is the grpc.ServiceDesc for ServiceTest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceTest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entity.ServiceTest",
	HandlerType: (*ServiceTestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindTeste",
			Handler:    _ServiceTest_FindTeste_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entity.proto",
}
